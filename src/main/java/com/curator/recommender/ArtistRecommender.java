package com.curator.recommender;

import com.curator.models.Artist;
import com.curator.models.Track;

import java.util.ArrayList;
import java.util.HashMap;

/**
 * 
 * @author Luke, Isaac, Meng
 * 
 *         This class receives a user-provided list of artists and creates a
 *         list of recommended artists who are similar to the user-provided
 *         artists. Songs by the user-provided artists are used as the input to
 *         a com.curator.recommender.SongRecommender instance. The list of recommended songs from that
 *         class is used to create a list of the most recommended artists.
 * 
 */
public class ArtistRecommender {
	ArrayList<Artist> userArtistLikes; // stores the user provided artists
	HashMap<Track, Double> userSongRecs; // stores songs from the Spotify
										// database and their similarity scores
	HashMap<Artist, Double> userArtistRecs; // a list of recommended artists and
											// their similarity scores

	// Constructor
	public ArtistRecommender(ArrayList<Artist> userArtistLikes) {
		this.userArtistLikes = userArtistLikes;
	}

	// Methods

	/**
	 * 
	 * @return userArtistLikes The list of user-provided artists
	 */
	public ArrayList<Artist> getUserArtistLikes() {
		return userArtistLikes;
	}

	/**
	 * Allows the userArtistLikes array to be edited after the class instance
	 * has been constructed.
	 * 
	 * @param userArtistLikes
	 */
	public void setUserArtistLikes(ArrayList<Artist> userArtistLikes) {
		this.userArtistLikes = userArtistLikes;
	}

	/**
	 * 
	 * @return userSongRecs The list of recommended songs generated by running
	 *         an instance of com.curator.recommender.SongRecommender
	 */
	public HashMap<Track, Double> getUserSongRecs() {
		return userSongRecs;
	}

	/**
	 * 
	 * @return userArtistRecs The list of recommended artists and their
	 *         similarity scores
	 */
	public HashMap<Artist, Double> getUserArtistRecs() {
		return userArtistRecs;
	}

	/**
	 * Creates a list of songs from the user-provided artists and uses those
	 * songs as an input to com.curator.recommender.SongRecommender. Retrieves the song recommendations
	 * from com.curator.recommender.SongRecommender. Stores these results in userSongRecs. Calculates
	 * artist similarity scores based on the similarity scores of the songs.
	 * Creates a list of recommended artists based on the artists of the songs
	 * in the list of recommended songs.
	 * 
	 * @param userArtistLikes The list of user provided artists
	 * @param userSongRecs    The list of songs from com.curator.recommender.SongRecommender
	 * @param userArtistRecs  The list of recommended artists and their
	 *                        similarity scores
	 */
	public void runRecommender() {
		// TODO
	}

	/**
	 * Ranks the artists in userArtistRecs according to their similarity scores.
	 * Displays the top-ranking 5 artists in the HashMap to the user.
	 * 
	 * @param userArtistRecs The HashMap containing artists and their similarity
	 *                       scores
	 */
	public void displayRecommendations() {
		// TODO
	}
}
