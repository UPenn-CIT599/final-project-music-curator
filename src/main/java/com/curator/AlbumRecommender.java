package com.curator;

import java.util.ArrayList;
import java.util.HashMap;

/**
 * 
 * @author Luke, Isaac, Meng
 * 
 *         This class receives a user-provided list of albums and creates a list
 *         of recommended albums that are similar to the user-provided albums.
 *         Songs on the user-provided albums are used as the input to a
 *         SongRecommender instance. The list of recommended songs from that
 *         class is used to create a list of the most recommended albums.
 * 
 */
public class AlbumRecommender {
	ArrayList<Album> userAlbumLikes; // stores the user provided albums
	HashMap<Artist, Double> userArtistRecs; // stores recommended artists and
											// their similarity scores from
											// running an instance of
											// ArtistRecommender
	HashMap<Album, Double> userAlbumRecs; // a list of recommended albums and
											// their similarity scores

	// Constructor
	public AlbumRecommender(ArrayList<Album> userAlbumLikes) {
		this.userAlbumLikes = userAlbumLikes;
	}

	// Methods

	/**
	 * 
	 * @return userAlbumLikes The list of recommended albums and their
	 *         similarity scores
	 */
	public ArrayList<Album> getUserAlbumLikes() {
		return userAlbumLikes;
	}

	/**
	 * Allows userAlbumLikes to be edited after construction of the class
	 * instance.
	 * 
	 * @param userAlbumLikes The list of user-provided albums
	 */
	public void setUserAlbumLikes(ArrayList<Album> userAlbumLikes) {
		this.userAlbumLikes = userAlbumLikes;
	}

	/**
	 * 
	 * @return userArtistRecs The list of recommended artists and their
	 *         similarity scores generated by an instance of ArtistRecommender
	 */
	public HashMap<Artist, Double> getUserArtistRecs() {
		return userArtistRecs;
	}

	/**
	 * 
	 * @return userAlbumRecs The list of recommended albums and their similarity
	 *         scores
	 */
	public HashMap<Album, Double> getUserAlbumRecs() {
		return userAlbumRecs;
	}

	/**
	 * Creates a list of artists from the user-provided albums and uses those
	 * songs as an input to ArtistRecommender. Retrieves the artist
	 * recommendations from ArtistRecommender. Creates a list of recommended
	 * albums based on the recommended artists (most popular albums by the
	 * recommended artists).
	 * 
	 * @param userAlbumLikes The list of user provided artists
	 * @param userArtistRecs The list of artists from ArtistRecommender
	 * @param userAlbumRecs  The list of recommended albums and their similarity
	 *                       scores
	 */
	public void runRecommender() {
		// TODO
	}

	/**
	 * Ranks the albums in userAlbumRecs according to their similarity scores.
	 * Displays the top-ranking 5 albums in the HashMap to the user.
	 * 
	 * @param userAlbumRecs The HashMap containing albums and their similarity
	 *                      scores
	 */
	public void displayRecommendations() {
		// TODO
	}
}
